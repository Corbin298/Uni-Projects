/* This code consists in building a simple telephone directory program using a linked list.
Each telephone record is composed of the name, surname, and telephone number. 
The program displays a main menu with options such as:
1. Add record
2. Delete record
3. Search
4. Display all records
5. Exit
*/ 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_LEN 50

typedef struct Noodle
{
    char name[MAX_LEN];
    char surname[MAX_LEN];
    char phone[MAX_LEN];
    struct Noodle *next;
} Noodle;

Noodle *head = NULL;

void addRecord(void);
void deleteRecord(void);
void searchRecord(void);
void displayRecords(void);
void toLowerCase(char *s);
int validatePhone(char *phone);

int main(void)
{
    // we initialize the switch choice at 0
    int choice = 0;

    while (choice != 5)
    {
        printf("A Telephone Directory\n");
        printf("1. Add record\n");
        printf("2. Delete record\n");
        printf("3. Search\n");
        printf("4. Display all records\n");
        printf("5. Exit\n");
        printf("Enter number for your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            addRecord();
            break;
        case 2:
            deleteRecord();
            break;
        case 3:
            searchRecord();
            break;
        case 4:
            displayRecords();
            break;
        case 5:
            printf("Exiting program...");
            break;
        default:
            printf("Not a valid choice.Try again.\n");
            break;
        }
    }

    return 0;
}

void addRecord(void)
{
    Noodle *newNoodle = (Noodle *)malloc(sizeof(Noodle));
    char phone[MAX_LEN];
    Noodle *current;
    Noodle *previous;

    printf("Enter your name: ");
    scanf("%s", newNoodle->name);
    printf("Enter your surname: ");
    scanf("%s", newNoodle->surname);
    /*Convert to lower case for future comparison in search */
    toLowerCase(newNoodle->name);
    toLowerCase(newNoodle->surname);

    printf("Enter your phone number: ");
    scanf("%s", phone);

    /* Validate phone number */
    if (!validatePhone(phone))
    {
        printf("Invalid phone number. Please enter either a 10-digit phone number or an existing one.\n");
        return;
    }
    strcpy(newNoodle->phone, phone);

    /* Insert new node in alphabetical order by name and surname */
    current = head;
    previous = NULL;
    while (current != NULL)
    {
        if (strcmp(current->name, newNoodle->name) > 0 ||
            (strcmp(current->name, newNoodle->name) == 0 && strcmp(current->surname, newNoodle->surname) > 0))
        {
            /* Insert new node before current node */
            if (previous == NULL)
            {
                /* Insert at head */
                newNoodle->next = head;
                head = newNoodle;
            }
            else
            {
                newNoodle->next = current;
                previous->next = newNoodle;
            }
            return;
        }
        previous = current;
        current = current->next;
    }
    /* Insert at end of list */
    newNoodle->next = NULL;
    if (previous == NULL)
    {
        head = newNoodle;
    }
    else
    {
        previous->next = newNoodle;
    }
}

void deleteRecord(void)
{
    char phone[MAX_LEN];
    Noodle *current;
    Noodle *previous;

    printf("Enter your phone number: ");
    scanf("%s", phone);

    /* Validate phone number */
    if (!validatePhone(phone))
    {
        printf("Invalid phone number. Please enter a 10-digit phone number or an existing one.\n");
        return;
    }

    current = head;
    previous = NULL;
    while (current != NULL)
    {
        if (strcmp(current->phone, phone) == 0)
        {
            /* Node found, delete it */
            if (previous == NULL)
            {
                /* Node to delete is head */
                head = current->next;
            }
            else
            {
                previous->next = current->next;
            }
            free(current);
            return;
        }
        previous = current;
        current = current->next;
    }
    printf("Record not found.\n");
}

void searchRecord(void)
{
    char input[MAX_LEN];
    char name[MAX_LEN];
    char surname[MAX_LEN];
    char phone[MAX_LEN];
    Noodle *current;
    int choice;

    printf("Search by:\n");
    printf("1. Name\n");
    printf("2. Surname\n");
    printf("3. Phone\n");
    printf("4. Name and surname\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice)
    {
    case 1:
        printf("Enter name: ");
        scanf("%s", name);
        /* Convert name to lowercase for case-insensitive comparison */
        toLowerCase(name);
        break;
    case 2:
        printf("Enter surname: ");
        scanf("%s", surname);
        /* Convert surname to lowercase for case-insensitive comparison */
        toLowerCase(surname);
        break;
    case 3:
        printf("Enter phone: ");
        scanf("%s", phone);
        /* Validate phone number */
        if (!validatePhone(phone))
        {
            printf("Invalid phone number. Please enter a 10-digit phone number or a unique phone number.\n");
            return;
        }
        break;
    case 4:
        printf("Enter name: ");
        scanf("%s", name);
        printf("Enter surname: ");
        scanf("%s", surname);
        /* Convert name and surname to lowercase for case-insensitive comparison */
        toLowerCase(name);
        toLowerCase(surname);
        break;
    default:
        printf("Invalid choice.\n");
        return;
    }

    current = head;
    while (current != NULL)
    {
        if ((choice == 1 && strcmp(current->name, name) == 0) ||
            (choice == 2 && strcmp(current->surname, surname) == 0) ||
            (choice == 3 && strcmp(current->phone, phone) == 0) ||
            (choice == 4 && strcmp(current->name, name) == 0 && strcmp(current->surname, surname) == 0))
        {
            /* Noodle found, display record */
            printf("Name: %s\n", current->name);
            printf("Surname: %s\n", current->surname);
            printf("Phone: %s\n", current->phone);
            return;
        }
        current = current->next;
    }
    printf("Record not found.\n");
}

void displayRecords(void)
{
    Noodle *current = head;

    while (current != NULL)
    {
        printf("Name: %s\n", current->name);
        printf("Surname: %s\n", current->surname);
        printf("Phone: %s\n", current->phone);
        current = current->next;
    }
}

void toLowerCase(char *s)
{
    int i;

    for (i = 0; i < strlen(s); i++)
    {
        s[i] = tolower(s[i]);
    }
}

int validatePhone(char *phone)
{
    int i;

    if (strlen(phone) != 10)
    {
        return 0;
    }
    for (i = 0; i < strlen(phone); i++)
    {
        if (!isdigit(phone[i]))
        {
            return 0;
        }
    }
    Noodle *current = head;
    while (current != NULL)
    {
        if (strcmp(current->phone, phone) == 0)
        {
            return 0;
        }
        current = current->next;
    }
    return 1;
}
